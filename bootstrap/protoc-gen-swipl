#!/usr/bin/env swipl
% -*- mode: prolog -*-

:- initialization(main, main).

:- use_module(library(protobufs)).

main(Argv) :-
    with_output_to(string(Result), main2(Argv, FileName)),
    Error = [], % or: Error = ['This is the error message']
    % TODO: use protobufs:protobuf_serialize_to_codes/3
    %       MessageType='.google.protobuf.compiler.CodeGeneratorResponse'
    Response = protobuf([ % message CodeGeneratorResponse
                          repeated( 1, string(Error)), % optional string error = 1
                          embedded(15, File)           % repeated File = 15
                        ]
                        ),
    File = protobuf([ % message File
                      string( 1, Name),   % optional string name = 1
                      string(15, Content) % optional string content = 15
                    ]),
    atom_concat(FilePart, ".proto", FileName),
    atom_concat(FilePart, "_pb.pl", Name),
    Content = Result,
    protobuf_message(Response, ResponseWireStream),
    set_stream(user_output, encoding(octet)),
    set_stream(user_output, type(binary)),
    format(user_output, '~s', [ResponseWireStream]),
    halt.

main2(Argv, FileName) :-
    set_stream(user_input, encoding(octet)),
    set_stream(user_input, type(binary)),
    read_stream_to_codes(user_input, RequestWireStream),
    protobuf_parse_from_codes(RequestWireStream,
                              '.google.protobuf.compiler.CodeGeneratorRequest',
                              Request),
    format('% ~w~n', ['-*- mode: prolog -*-']),
    format('~q.~n', [(:- module(plugin_pb, []))]),
    (   current_prolog_flag(version_git, Version)
    ->  format('swi_prolog_version(~q).~n', [Version])
    ;   current_prolog_flag(version_data, swi(Major, Minor, Path, Extra)),
        (   Extra == []
        ->  format('swi_prolog_version(\'~w.~w.~w\').~n',    [Major, Minor, Path])
        ;   format('swi_prolog_version(\'~w.~w.~w.~w\').~n', [Major, Minor, Path, Extra])
        )
    ),
    ProtocVersion = Request.compiler_version,
    (   ProtocVersion.suffix == ''
    ->  format('protoc_version(\'~w.~w.~w\').~n',
               [ProtocVersion.major, ProtocVersion.minor, ProtocVersion.patch])
    ;   format('protoc_version(\'~w.~w.~w.~w\').~n',
               [ProtocVersion.major, ProtocVersion.minor, ProtocVersion.patch, ProtocVersion.suffix])
    ),
    format('prototoc_gen_swipl_args(~q).~n', [Argv]),
    format('file_to_generate(~q).~n', [Request.file_to_generate]),
    format('~n', []),
    generated_preds(Preds),
    atomic_list_concat(Preds, ',\n    ', PredsStr),
    format(':- multifile~n    ~w~n', [PredsStr]),
    format(':- discontiguous~n    ~w~n~n', [PredsStr]),
    format('request(~n', []),
    maplist(nb_set_dict_value(source_code_info, ' <deleted> '), Request.proto_file),
    % (   select_dict(_{source_code_info:_}, Request, RequestWithoutSourceCodeInfo)
    % ->  true
    % ;   RequestWithoutSourceCodeInfo = Request
    % ),
    % print_term(RequestWithoutSourceCodeInfo, [indent_arguments(4),output(current_output)]),
    print_term(Request, [indent_arguments(4),output(current_output)]),
    format(').~n', []),
    format('request_wire_stream(~q).~n', [RequestWireStream]),
    Request.file_to_generate = [FileName|_]. % DO NOT SUBMIT

nb_set_dict_value(Key, Value, Dict) :-
    nb_set_dict(Key, Dict, Value).

generated_preds(Preds) :-
        Preds = [
     'protobufs:package/3,             %   protobufs:package(Package, FileName, Options)',
     'protobufs:message_type/3,        %   protobufs:message_type(       Fqn,     Package, Name)',
     'protobufs:field_name/4,          %   protobufs:field_name(         Fqn,     FieldNumber, FieldName, FqnName)',
     'protobufs:field_json_name/2,     %   protobufs:field_json_name(    FqnName, JsonName)',
     'protobufs:field_label/2,         %   protobufs:field_label(        FqnName, LabelRepeatOptional) % LABEL_OPTIONAL, LABEL_REQUIRED, LABEL_REPEATED',
     'protobufs:field_type/2,          %   protobufs:field_type(         FqnName, Type) % TYPE_INT32, TYPE_MESSAGE, etc',
     'protobufs:field_type_name/2,     %   protobufs:field_type_name(    FqnName, TypeName)',
     'protobufs:field_default_value/2, %   protobufs:field_default_value(FqnName, DefaultValue)',
     'protobufs:field_option_packed/1, %   protobufs:field_option_packed(FqnName)',
     'protobufs:enum_type/3,           %   protobufs:enum_type(          FqnName, Fqn, Name)',
     'protobufs:enum_value/3.          %   protobufs:enum_value(         FqnName, Name, Number)'
            ].

% TODO: update this documentation:
% The following was generated by running parse_descriptor_proto_dump.pl
% and extracting the contents. See also descriptor_proto.pl

:- use_module(protoc_gen_prolog_pb/plugin_pb).
:- use_module(protoc_gen_prolog_pb/descriptor_pb).

end_of_file.
